import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { Header } from "~/components/Header";
import { api, RouterOutputs } from "~/utils/api";

type Topic = RouterOutputs["topic"]["getAll"][0];

export default function Home() {
  const { data: sessionData } = useSession();
  const router = useRouter();

  useEffect(() => {
    if (!sessionData?.user) router.push("/");
  });

  return (
    <>
      <Head>
        <title>Notes</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Header />
        <Content />
      </main>
    </>
  );
}

const Content = () => {
  const [topicTitle, setTopicTitle] = useState("");
  const [searchTerm, setSearchTerm] = useState("");
  const [searchTopics, setSearchTopics] = useState<Topic[] | undefined>(
    undefined
  );
  const [isTopicTitleInvalid, setIsTopicTitleInvalid] = useState(false);
  const [selectedTopic, setSelectedTopic] = useState<Topic | null>(null);

  const { data: sessionData } = useSession();
  const { data: topics, refetch: refetchTopics } = api.topic.getAll.useQuery(
    undefined,
    {
      enabled: sessionData?.user !== undefined,
      onSuccess: (data) => setSearchTopics(data),
    }
  );

  const createTopicMutation = api.topic.create.useMutation({
    onSuccess: (topic) => {
      refetchTopics();
      setSelectedTopic(topic);
    },
  });

  const createTopic = () => {
    if (topicTitle.length === 0) {
      setIsTopicTitleInvalid(true);
      return;
    }

    createTopicMutation.mutate({ title: topicTitle });
    setTopicTitle("");
  };

  const renderTopics = () => {
    return searchTopics?.map((topic) => (
      <li key={topic.id} className="">
        <a
          href="#"
          className={`block max-w-full truncate ${
            topic.id == selectedTopic?.id ? "active" : ""
          }`}
          onClick={(e) => {
            e.preventDefault();
            setSelectedTopic(topic);
          }}
        >
          {topic.title}
        </a>
      </li>
    ));
  };

  return (
    <>
      <div className="mx-5 mt-5 grid grid-cols-4 gap-5">
        <div className="px-2">
          <input
            type="text"
            placeholder="Create topic"
            className={`input input-bordered input-sm w-full ${
              isTopicTitleInvalid && "input-error"
            }`}
            value={topicTitle}
            onChange={(e) => {
              setTopicTitle(e.target.value);
              setIsTopicTitleInvalid(false);
            }}
            onKeyDown={(e) => {
              if (e.key === "Enter") createTopic();
            }}
          />

          {isTopicTitleInvalid && (
            <label className="label label-text-alt text-error">
              Topic title cannot be empty
            </label>
          )}
          <div className="divider"></div>

          <input
            type="text"
            placeholder="Search"
            className="input input-bordered input-sm w-full"
            value={searchTerm}
            onChange={(e) => {
              setSearchTerm(e.target.value);
              setSearchTopics(
                topics?.filter((topic) =>
                  topic.title
                    .toLowerCase()
                    .includes(e.target.value.toLowerCase())
                )
              );
            }}
          />

          {searchTerm && (
            <label className="label label-text-alt flex-row-reverse">
              <a
                href="#"
                className="link"
                onClick={() => {
                  setSearchTopics(topics);
                  setSearchTerm("");
                }}
              >
                Clear
              </a>
            </label>
          )}

          <div className="divider"></div>

          <div className="menu-title">
            <div className="flex gap-2">
              <span className="flex-1">Topics</span>
              <span className="flex-none">{searchTopics?.length}</span>
            </div>
          </div>

          <ul className="menu rounded-box max-h-screen flex-nowrap overflow-auto bg-base-100 px-0">
            {renderTopics()}
          </ul>
          <div className="divider"></div>
        </div>
        {JSON.stringify(selectedTopic)}
      </div>
    </>
  );
};

// function AuthShowcase() {
//   const { data: sessionData } = useSession();

//   const { data: secretMessage } = api.example.getSecretMessage.useQuery(
//     undefined, // no input
//     { enabled: sessionData?.user !== undefined }
//   );

//   return (
//     <div className="flex flex-col items-center justify-center gap-4">
//       <p className="text-center text-2xl text-white">
//         {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
//         {secretMessage && <span> - {secretMessage}</span>}
//       </p>
//       <button
//         className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
//         onClick={sessionData ? () => void signOut() : () => void signIn()}
//       >
//         {sessionData ? "Sign out" : "Sign in"}
//       </button>
//     </div>
//   );
// }
